// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *User) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_User[number], err)
}

func (x *User) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Ua, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Idfa, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Imei, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Eh, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Right) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Right[number], err)
}

func (x *Right) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Right) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Num, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Right) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Amt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *User) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *User) fastWriteField2(buf []byte) (offset int) {
	if x.UserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserName())
	return offset
}

func (x *User) fastWriteField3(buf []byte) (offset int) {
	if x.Ua == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUa())
	return offset
}

func (x *User) fastWriteField4(buf []byte) (offset int) {
	if x.Idfa == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetIdfa())
	return offset
}

func (x *User) fastWriteField5(buf []byte) (offset int) {
	if x.Imei == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetImei())
	return offset
}

func (x *User) fastWriteField6(buf []byte) (offset int) {
	if x.Eh == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetEh())
	return offset
}

func (x *Right) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Right) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Right) fastWriteField2(buf []byte) (offset int) {
	if x.Num == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetNum())
	return offset
}

func (x *Right) fastWriteField3(buf []byte) (offset int) {
	if x.Amt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAmt())
	return offset
}

func (x *User) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *User) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserId())
	return n
}

func (x *User) sizeField2() (n int) {
	if x.UserName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserName())
	return n
}

func (x *User) sizeField3() (n int) {
	if x.Ua == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUa())
	return n
}

func (x *User) sizeField4() (n int) {
	if x.Idfa == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetIdfa())
	return n
}

func (x *User) sizeField5() (n int) {
	if x.Imei == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetImei())
	return n
}

func (x *User) sizeField6() (n int) {
	if x.Eh == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetEh())
	return n
}

func (x *Right) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Right) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Right) sizeField2() (n int) {
	if x.Num == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetNum())
	return n
}

func (x *Right) sizeField3() (n int) {
	if x.Amt == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAmt())
	return n
}

var fieldIDToName_User = map[int32]string{
	1: "UserId",
	2: "UserName",
	3: "Ua",
	4: "Idfa",
	5: "Imei",
	6: "Eh",
}

var fieldIDToName_Right = map[int32]string{
	1: "Id",
	2: "Num",
	3: "Amt",
}
