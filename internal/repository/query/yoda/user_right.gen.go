// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package yoda

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	model "github.com/zlllgp/vegas/internal/repository/model/yoda"
)

func newUerRight(db *gorm.DB, opts ...gen.DOOption) uerRight {
	_uerRight := uerRight{}

	_uerRight.uerRightDo.UseDB(db, opts...)
	_uerRight.uerRightDo.UseModel(&model.UerRight{})

	tableName := _uerRight.uerRightDo.TableName()
	_uerRight.ALL = field.NewAsterisk(tableName)
	_uerRight.ID = field.NewUint(tableName, "id")
	_uerRight.CreatedAt = field.NewTime(tableName, "created_at")
	_uerRight.UpdatedAt = field.NewTime(tableName, "updated_at")
	_uerRight.DeletedAt = field.NewField(tableName, "deleted_at")
	_uerRight.UserId = field.NewInt64(tableName, "user_id")
	_uerRight.UserName = field.NewString(tableName, "user_name")
	_uerRight.ActivityId = field.NewInt64(tableName, "activity_id")
	_uerRight.PlanId = field.NewInt64(tableName, "plan_id")
	_uerRight.RightsTemplateId = field.NewInt64(tableName, "rights_template_id")
	_uerRight.RightsInstanceId = field.NewInt64(tableName, "rights_instance_id")

	_uerRight.fillFieldMap()

	return _uerRight
}

type uerRight struct {
	uerRightDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	UserId           field.Int64
	UserName         field.String
	ActivityId       field.Int64
	PlanId           field.Int64
	RightsTemplateId field.Int64
	RightsInstanceId field.Int64

	fieldMap map[string]field.Expr
}

func (u uerRight) Table(newTableName string) *uerRight {
	u.uerRightDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uerRight) As(alias string) *uerRight {
	u.uerRightDo.DO = *(u.uerRightDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uerRight) updateTableName(table string) *uerRight {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserId = field.NewInt64(table, "user_id")
	u.UserName = field.NewString(table, "user_name")
	u.ActivityId = field.NewInt64(table, "activity_id")
	u.PlanId = field.NewInt64(table, "plan_id")
	u.RightsTemplateId = field.NewInt64(table, "rights_template_id")
	u.RightsInstanceId = field.NewInt64(table, "rights_instance_id")

	u.fillFieldMap()

	return u
}

func (u *uerRight) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uerRight) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserId
	u.fieldMap["user_name"] = u.UserName
	u.fieldMap["activity_id"] = u.ActivityId
	u.fieldMap["plan_id"] = u.PlanId
	u.fieldMap["rights_template_id"] = u.RightsTemplateId
	u.fieldMap["rights_instance_id"] = u.RightsInstanceId
}

func (u uerRight) clone(db *gorm.DB) uerRight {
	u.uerRightDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uerRight) replaceDB(db *gorm.DB) uerRight {
	u.uerRightDo.ReplaceDB(db)
	return u
}

type uerRightDo struct{ gen.DO }

type IUerRightDo interface {
	gen.SubQuery
	Debug() IUerRightDo
	WithContext(ctx context.Context) IUerRightDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUerRightDo
	WriteDB() IUerRightDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUerRightDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUerRightDo
	Not(conds ...gen.Condition) IUerRightDo
	Or(conds ...gen.Condition) IUerRightDo
	Select(conds ...field.Expr) IUerRightDo
	Where(conds ...gen.Condition) IUerRightDo
	Order(conds ...field.Expr) IUerRightDo
	Distinct(cols ...field.Expr) IUerRightDo
	Omit(cols ...field.Expr) IUerRightDo
	Join(table schema.Tabler, on ...field.Expr) IUerRightDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUerRightDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUerRightDo
	Group(cols ...field.Expr) IUerRightDo
	Having(conds ...gen.Condition) IUerRightDo
	Limit(limit int) IUerRightDo
	Offset(offset int) IUerRightDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUerRightDo
	Unscoped() IUerRightDo
	Create(values ...*model.UerRight) error
	CreateInBatches(values []*model.UerRight, batchSize int) error
	Save(values ...*model.UerRight) error
	First() (*model.UerRight, error)
	Take() (*model.UerRight, error)
	Last() (*model.UerRight, error)
	Find() ([]*model.UerRight, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UerRight, err error)
	FindInBatches(result *[]*model.UerRight, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UerRight) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUerRightDo
	Assign(attrs ...field.AssignExpr) IUerRightDo
	Joins(fields ...field.RelationField) IUerRightDo
	Preload(fields ...field.RelationField) IUerRightDo
	FirstOrInit() (*model.UerRight, error)
	FirstOrCreate() (*model.UerRight, error)
	FindByPage(offset int, limit int) (result []*model.UerRight, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUerRightDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uerRightDo) Debug() IUerRightDo {
	return u.withDO(u.DO.Debug())
}

func (u uerRightDo) WithContext(ctx context.Context) IUerRightDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uerRightDo) ReadDB() IUerRightDo {
	return u.Clauses(dbresolver.Read)
}

func (u uerRightDo) WriteDB() IUerRightDo {
	return u.Clauses(dbresolver.Write)
}

func (u uerRightDo) Session(config *gorm.Session) IUerRightDo {
	return u.withDO(u.DO.Session(config))
}

func (u uerRightDo) Clauses(conds ...clause.Expression) IUerRightDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uerRightDo) Returning(value interface{}, columns ...string) IUerRightDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uerRightDo) Not(conds ...gen.Condition) IUerRightDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uerRightDo) Or(conds ...gen.Condition) IUerRightDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uerRightDo) Select(conds ...field.Expr) IUerRightDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uerRightDo) Where(conds ...gen.Condition) IUerRightDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uerRightDo) Order(conds ...field.Expr) IUerRightDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uerRightDo) Distinct(cols ...field.Expr) IUerRightDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uerRightDo) Omit(cols ...field.Expr) IUerRightDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uerRightDo) Join(table schema.Tabler, on ...field.Expr) IUerRightDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uerRightDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUerRightDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uerRightDo) RightJoin(table schema.Tabler, on ...field.Expr) IUerRightDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uerRightDo) Group(cols ...field.Expr) IUerRightDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uerRightDo) Having(conds ...gen.Condition) IUerRightDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uerRightDo) Limit(limit int) IUerRightDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uerRightDo) Offset(offset int) IUerRightDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uerRightDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUerRightDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uerRightDo) Unscoped() IUerRightDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uerRightDo) Create(values ...*model.UerRight) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uerRightDo) CreateInBatches(values []*model.UerRight, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uerRightDo) Save(values ...*model.UerRight) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uerRightDo) First() (*model.UerRight, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UerRight), nil
	}
}

func (u uerRightDo) Take() (*model.UerRight, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UerRight), nil
	}
}

func (u uerRightDo) Last() (*model.UerRight, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UerRight), nil
	}
}

func (u uerRightDo) Find() ([]*model.UerRight, error) {
	result, err := u.DO.Find()
	return result.([]*model.UerRight), err
}

func (u uerRightDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UerRight, err error) {
	buf := make([]*model.UerRight, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uerRightDo) FindInBatches(result *[]*model.UerRight, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uerRightDo) Attrs(attrs ...field.AssignExpr) IUerRightDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uerRightDo) Assign(attrs ...field.AssignExpr) IUerRightDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uerRightDo) Joins(fields ...field.RelationField) IUerRightDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uerRightDo) Preload(fields ...field.RelationField) IUerRightDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uerRightDo) FirstOrInit() (*model.UerRight, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UerRight), nil
	}
}

func (u uerRightDo) FirstOrCreate() (*model.UerRight, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UerRight), nil
	}
}

func (u uerRightDo) FindByPage(offset int, limit int) (result []*model.UerRight, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uerRightDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uerRightDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uerRightDo) Delete(models ...*model.UerRight) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uerRightDo) withDO(do gen.Dao) *uerRightDo {
	u.DO = *do.(*gen.DO)
	return u
}
