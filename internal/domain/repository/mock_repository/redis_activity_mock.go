// Code generated by MockGen. DO NOT EDIT.
// Source: redis_activity.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/zlllgp/vegas/internal/domain/entity"
)

// MockRedisActivityRepository is a mock of RedisActivityRepository interface.
type MockRedisActivityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisActivityRepositoryMockRecorder
}

// MockRedisActivityRepositoryMockRecorder is the mock recorder for MockRedisActivityRepository.
type MockRedisActivityRepositoryMockRecorder struct {
	mock *MockRedisActivityRepository
}

// NewMockRedisActivityRepository creates a new mock instance.
func NewMockRedisActivityRepository(ctrl *gomock.Controller) *MockRedisActivityRepository {
	mock := &MockRedisActivityRepository{ctrl: ctrl}
	mock.recorder = &MockRedisActivityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisActivityRepository) EXPECT() *MockRedisActivityRepositoryMockRecorder {
	return m.recorder
}

// GetActivity mocks base method.
func (m *MockRedisActivityRepository) GetActivity(ctx context.Context, id int64) (*entity.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivity", ctx, id)
	ret0, _ := ret[0].(*entity.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivity indicates an expected call of GetActivity.
func (mr *MockRedisActivityRepositoryMockRecorder) GetActivity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivity", reflect.TypeOf((*MockRedisActivityRepository)(nil).GetActivity), ctx, id)
}

// StoreActivity mocks base method.
func (m *MockRedisActivityRepository) StoreActivity(ctx context.Context, id int64, activity *entity.Activity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreActivity", ctx, id, activity)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreActivity indicates an expected call of StoreActivity.
func (mr *MockRedisActivityRepositoryMockRecorder) StoreActivity(ctx, id, activity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreActivity", reflect.TypeOf((*MockRedisActivityRepository)(nil).StoreActivity), ctx, id, activity)
}
