// Code generated by MockGen. DO NOT EDIT.
// Source: rmb_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRmbRepository is a mock of RmbRepository interface.
type MockRmbRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRmbRepositoryMockRecorder
}

// MockRmbRepositoryMockRecorder is the mock recorder for MockRmbRepository.
type MockRmbRepositoryMockRecorder struct {
	mock *MockRmbRepository
}

// NewMockRmbRepository creates a new mock instance.
func NewMockRmbRepository(ctrl *gomock.Controller) *MockRmbRepository {
	mock := &MockRmbRepository{ctrl: ctrl}
	mock.recorder = &MockRmbRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRmbRepository) EXPECT() *MockRmbRepositoryMockRecorder {
	return m.recorder
}

// IsSafe mocks base method.
func (m *MockRmbRepository) IsSafe(ctx context.Context, userId int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSafe", ctx, userId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSafe indicates an expected call of IsSafe.
func (mr *MockRmbRepositoryMockRecorder) IsSafe(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSafe", reflect.TypeOf((*MockRmbRepository)(nil).IsSafe), ctx, userId)
}
