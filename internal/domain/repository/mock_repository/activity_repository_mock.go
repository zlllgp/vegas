// Code generated by MockGen. DO NOT EDIT.
// Source: activity_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/zlllgp/vegas/internal/infrastructure/dal/wk/model"
)

// MockActivityRepository is a mock of ActivityRepository interface.
type MockActivityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActivityRepositoryMockRecorder
}

// MockActivityRepositoryMockRecorder is the mock recorder for MockActivityRepository.
type MockActivityRepositoryMockRecorder struct {
	mock *MockActivityRepository
}

// NewMockActivityRepository creates a new mock instance.
func NewMockActivityRepository(ctrl *gomock.Controller) *MockActivityRepository {
	mock := &MockActivityRepository{ctrl: ctrl}
	mock.recorder = &MockActivityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityRepository) EXPECT() *MockActivityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActivityRepository) Create(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockActivityRepositoryMockRecorder) Create(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActivityRepository)(nil).Create), ctx, name)
}

// GetById mocks base method.
func (m *MockActivityRepository) GetById(ctx context.Context, id int64) (*model.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*model.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockActivityRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockActivityRepository)(nil).GetById), ctx, id)
}

// IsNameExist mocks base method.
func (m *MockActivityRepository) IsNameExist(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNameExist", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNameExist indicates an expected call of IsNameExist.
func (mr *MockActivityRepositoryMockRecorder) IsNameExist(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNameExist", reflect.TypeOf((*MockActivityRepository)(nil).IsNameExist), ctx, name)
}

// UpdateName mocks base method.
func (m *MockActivityRepository) UpdateName(ctx context.Context, account *model.Activity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockActivityRepositoryMockRecorder) UpdateName(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockActivityRepository)(nil).UpdateName), ctx, account)
}
