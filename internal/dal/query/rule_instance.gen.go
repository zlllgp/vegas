// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zlllgp/vegas/internal/dal/model"
)

func newRuleInstance(db *gorm.DB, opts ...gen.DOOption) ruleInstance {
	_ruleInstance := ruleInstance{}

	_ruleInstance.ruleInstanceDo.UseDB(db, opts...)
	_ruleInstance.ruleInstanceDo.UseModel(&model.RuleInstance{})

	tableName := _ruleInstance.ruleInstanceDo.TableName()
	_ruleInstance.ALL = field.NewAsterisk(tableName)
	_ruleInstance.ID = field.NewUint(tableName, "id")
	_ruleInstance.CreatedAt = field.NewTime(tableName, "created_at")
	_ruleInstance.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ruleInstance.DeletedAt = field.NewField(tableName, "deleted_at")
	_ruleInstance.CreatorId = field.NewInt64(tableName, "creator_id")
	_ruleInstance.CreatorName = field.NewString(tableName, "creator_name")
	_ruleInstance.RuleMetaId = field.NewInt64(tableName, "rule_meta_id")
	_ruleInstance.Name = field.NewString(tableName, "name")
	_ruleInstance.Description = field.NewString(tableName, "description")

	_ruleInstance.fillFieldMap()

	return _ruleInstance
}

type ruleInstance struct {
	ruleInstanceDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	CreatorId   field.Int64
	CreatorName field.String
	RuleMetaId  field.Int64
	Name        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (r ruleInstance) Table(newTableName string) *ruleInstance {
	r.ruleInstanceDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r ruleInstance) As(alias string) *ruleInstance {
	r.ruleInstanceDo.DO = *(r.ruleInstanceDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *ruleInstance) updateTableName(table string) *ruleInstance {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.CreatorId = field.NewInt64(table, "creator_id")
	r.CreatorName = field.NewString(table, "creator_name")
	r.RuleMetaId = field.NewInt64(table, "rule_meta_id")
	r.Name = field.NewString(table, "name")
	r.Description = field.NewString(table, "description")

	r.fillFieldMap()

	return r
}

func (r *ruleInstance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *ruleInstance) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["creator_id"] = r.CreatorId
	r.fieldMap["creator_name"] = r.CreatorName
	r.fieldMap["rule_meta_id"] = r.RuleMetaId
	r.fieldMap["name"] = r.Name
	r.fieldMap["description"] = r.Description
}

func (r ruleInstance) clone(db *gorm.DB) ruleInstance {
	r.ruleInstanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r ruleInstance) replaceDB(db *gorm.DB) ruleInstance {
	r.ruleInstanceDo.ReplaceDB(db)
	return r
}

type ruleInstanceDo struct{ gen.DO }

type IRuleInstanceDo interface {
	gen.SubQuery
	Debug() IRuleInstanceDo
	WithContext(ctx context.Context) IRuleInstanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRuleInstanceDo
	WriteDB() IRuleInstanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRuleInstanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRuleInstanceDo
	Not(conds ...gen.Condition) IRuleInstanceDo
	Or(conds ...gen.Condition) IRuleInstanceDo
	Select(conds ...field.Expr) IRuleInstanceDo
	Where(conds ...gen.Condition) IRuleInstanceDo
	Order(conds ...field.Expr) IRuleInstanceDo
	Distinct(cols ...field.Expr) IRuleInstanceDo
	Omit(cols ...field.Expr) IRuleInstanceDo
	Join(table schema.Tabler, on ...field.Expr) IRuleInstanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRuleInstanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRuleInstanceDo
	Group(cols ...field.Expr) IRuleInstanceDo
	Having(conds ...gen.Condition) IRuleInstanceDo
	Limit(limit int) IRuleInstanceDo
	Offset(offset int) IRuleInstanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRuleInstanceDo
	Unscoped() IRuleInstanceDo
	Create(values ...*model.RuleInstance) error
	CreateInBatches(values []*model.RuleInstance, batchSize int) error
	Save(values ...*model.RuleInstance) error
	First() (*model.RuleInstance, error)
	Take() (*model.RuleInstance, error)
	Last() (*model.RuleInstance, error)
	Find() ([]*model.RuleInstance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RuleInstance, err error)
	FindInBatches(result *[]*model.RuleInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RuleInstance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRuleInstanceDo
	Assign(attrs ...field.AssignExpr) IRuleInstanceDo
	Joins(fields ...field.RelationField) IRuleInstanceDo
	Preload(fields ...field.RelationField) IRuleInstanceDo
	FirstOrInit() (*model.RuleInstance, error)
	FirstOrCreate() (*model.RuleInstance, error)
	FindByPage(offset int, limit int) (result []*model.RuleInstance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRuleInstanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r ruleInstanceDo) Debug() IRuleInstanceDo {
	return r.withDO(r.DO.Debug())
}

func (r ruleInstanceDo) WithContext(ctx context.Context) IRuleInstanceDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r ruleInstanceDo) ReadDB() IRuleInstanceDo {
	return r.Clauses(dbresolver.Read)
}

func (r ruleInstanceDo) WriteDB() IRuleInstanceDo {
	return r.Clauses(dbresolver.Write)
}

func (r ruleInstanceDo) Session(config *gorm.Session) IRuleInstanceDo {
	return r.withDO(r.DO.Session(config))
}

func (r ruleInstanceDo) Clauses(conds ...clause.Expression) IRuleInstanceDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r ruleInstanceDo) Returning(value interface{}, columns ...string) IRuleInstanceDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r ruleInstanceDo) Not(conds ...gen.Condition) IRuleInstanceDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r ruleInstanceDo) Or(conds ...gen.Condition) IRuleInstanceDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r ruleInstanceDo) Select(conds ...field.Expr) IRuleInstanceDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r ruleInstanceDo) Where(conds ...gen.Condition) IRuleInstanceDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r ruleInstanceDo) Order(conds ...field.Expr) IRuleInstanceDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r ruleInstanceDo) Distinct(cols ...field.Expr) IRuleInstanceDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r ruleInstanceDo) Omit(cols ...field.Expr) IRuleInstanceDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r ruleInstanceDo) Join(table schema.Tabler, on ...field.Expr) IRuleInstanceDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r ruleInstanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRuleInstanceDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r ruleInstanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IRuleInstanceDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r ruleInstanceDo) Group(cols ...field.Expr) IRuleInstanceDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r ruleInstanceDo) Having(conds ...gen.Condition) IRuleInstanceDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r ruleInstanceDo) Limit(limit int) IRuleInstanceDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r ruleInstanceDo) Offset(offset int) IRuleInstanceDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r ruleInstanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRuleInstanceDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r ruleInstanceDo) Unscoped() IRuleInstanceDo {
	return r.withDO(r.DO.Unscoped())
}

func (r ruleInstanceDo) Create(values ...*model.RuleInstance) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r ruleInstanceDo) CreateInBatches(values []*model.RuleInstance, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r ruleInstanceDo) Save(values ...*model.RuleInstance) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r ruleInstanceDo) First() (*model.RuleInstance, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleInstance), nil
	}
}

func (r ruleInstanceDo) Take() (*model.RuleInstance, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleInstance), nil
	}
}

func (r ruleInstanceDo) Last() (*model.RuleInstance, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleInstance), nil
	}
}

func (r ruleInstanceDo) Find() ([]*model.RuleInstance, error) {
	result, err := r.DO.Find()
	return result.([]*model.RuleInstance), err
}

func (r ruleInstanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RuleInstance, err error) {
	buf := make([]*model.RuleInstance, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r ruleInstanceDo) FindInBatches(result *[]*model.RuleInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r ruleInstanceDo) Attrs(attrs ...field.AssignExpr) IRuleInstanceDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r ruleInstanceDo) Assign(attrs ...field.AssignExpr) IRuleInstanceDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r ruleInstanceDo) Joins(fields ...field.RelationField) IRuleInstanceDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r ruleInstanceDo) Preload(fields ...field.RelationField) IRuleInstanceDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r ruleInstanceDo) FirstOrInit() (*model.RuleInstance, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleInstance), nil
	}
}

func (r ruleInstanceDo) FirstOrCreate() (*model.RuleInstance, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleInstance), nil
	}
}

func (r ruleInstanceDo) FindByPage(offset int, limit int) (result []*model.RuleInstance, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r ruleInstanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r ruleInstanceDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r ruleInstanceDo) Delete(models ...*model.RuleInstance) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *ruleInstanceDo) withDO(do gen.Dao) *ruleInstanceDo {
	r.DO = *do.(*gen.DO)
	return r
}
