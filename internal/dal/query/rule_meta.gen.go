// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zlllgp/vegas/internal/dal/model"
)

func newRuleMeta(db *gorm.DB, opts ...gen.DOOption) ruleMeta {
	_ruleMeta := ruleMeta{}

	_ruleMeta.ruleMetaDo.UseDB(db, opts...)
	_ruleMeta.ruleMetaDo.UseModel(&model.RuleMeta{})

	tableName := _ruleMeta.ruleMetaDo.TableName()
	_ruleMeta.ALL = field.NewAsterisk(tableName)
	_ruleMeta.ID = field.NewUint(tableName, "id")
	_ruleMeta.CreatedAt = field.NewTime(tableName, "created_at")
	_ruleMeta.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ruleMeta.DeletedAt = field.NewField(tableName, "deleted_at")
	_ruleMeta.CreatorId = field.NewInt64(tableName, "creator_id")
	_ruleMeta.CreatorName = field.NewString(tableName, "creator_name")
	_ruleMeta.Name = field.NewString(tableName, "name")
	_ruleMeta.Description = field.NewString(tableName, "description")

	_ruleMeta.fillFieldMap()

	return _ruleMeta
}

type ruleMeta struct {
	ruleMetaDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	CreatorId   field.Int64
	CreatorName field.String
	Name        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (r ruleMeta) Table(newTableName string) *ruleMeta {
	r.ruleMetaDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r ruleMeta) As(alias string) *ruleMeta {
	r.ruleMetaDo.DO = *(r.ruleMetaDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *ruleMeta) updateTableName(table string) *ruleMeta {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.CreatorId = field.NewInt64(table, "creator_id")
	r.CreatorName = field.NewString(table, "creator_name")
	r.Name = field.NewString(table, "name")
	r.Description = field.NewString(table, "description")

	r.fillFieldMap()

	return r
}

func (r *ruleMeta) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *ruleMeta) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["creator_id"] = r.CreatorId
	r.fieldMap["creator_name"] = r.CreatorName
	r.fieldMap["name"] = r.Name
	r.fieldMap["description"] = r.Description
}

func (r ruleMeta) clone(db *gorm.DB) ruleMeta {
	r.ruleMetaDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r ruleMeta) replaceDB(db *gorm.DB) ruleMeta {
	r.ruleMetaDo.ReplaceDB(db)
	return r
}

type ruleMetaDo struct{ gen.DO }

type IRuleMetaDo interface {
	gen.SubQuery
	Debug() IRuleMetaDo
	WithContext(ctx context.Context) IRuleMetaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRuleMetaDo
	WriteDB() IRuleMetaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRuleMetaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRuleMetaDo
	Not(conds ...gen.Condition) IRuleMetaDo
	Or(conds ...gen.Condition) IRuleMetaDo
	Select(conds ...field.Expr) IRuleMetaDo
	Where(conds ...gen.Condition) IRuleMetaDo
	Order(conds ...field.Expr) IRuleMetaDo
	Distinct(cols ...field.Expr) IRuleMetaDo
	Omit(cols ...field.Expr) IRuleMetaDo
	Join(table schema.Tabler, on ...field.Expr) IRuleMetaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRuleMetaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRuleMetaDo
	Group(cols ...field.Expr) IRuleMetaDo
	Having(conds ...gen.Condition) IRuleMetaDo
	Limit(limit int) IRuleMetaDo
	Offset(offset int) IRuleMetaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRuleMetaDo
	Unscoped() IRuleMetaDo
	Create(values ...*model.RuleMeta) error
	CreateInBatches(values []*model.RuleMeta, batchSize int) error
	Save(values ...*model.RuleMeta) error
	First() (*model.RuleMeta, error)
	Take() (*model.RuleMeta, error)
	Last() (*model.RuleMeta, error)
	Find() ([]*model.RuleMeta, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RuleMeta, err error)
	FindInBatches(result *[]*model.RuleMeta, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RuleMeta) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRuleMetaDo
	Assign(attrs ...field.AssignExpr) IRuleMetaDo
	Joins(fields ...field.RelationField) IRuleMetaDo
	Preload(fields ...field.RelationField) IRuleMetaDo
	FirstOrInit() (*model.RuleMeta, error)
	FirstOrCreate() (*model.RuleMeta, error)
	FindByPage(offset int, limit int) (result []*model.RuleMeta, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRuleMetaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r ruleMetaDo) Debug() IRuleMetaDo {
	return r.withDO(r.DO.Debug())
}

func (r ruleMetaDo) WithContext(ctx context.Context) IRuleMetaDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r ruleMetaDo) ReadDB() IRuleMetaDo {
	return r.Clauses(dbresolver.Read)
}

func (r ruleMetaDo) WriteDB() IRuleMetaDo {
	return r.Clauses(dbresolver.Write)
}

func (r ruleMetaDo) Session(config *gorm.Session) IRuleMetaDo {
	return r.withDO(r.DO.Session(config))
}

func (r ruleMetaDo) Clauses(conds ...clause.Expression) IRuleMetaDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r ruleMetaDo) Returning(value interface{}, columns ...string) IRuleMetaDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r ruleMetaDo) Not(conds ...gen.Condition) IRuleMetaDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r ruleMetaDo) Or(conds ...gen.Condition) IRuleMetaDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r ruleMetaDo) Select(conds ...field.Expr) IRuleMetaDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r ruleMetaDo) Where(conds ...gen.Condition) IRuleMetaDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r ruleMetaDo) Order(conds ...field.Expr) IRuleMetaDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r ruleMetaDo) Distinct(cols ...field.Expr) IRuleMetaDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r ruleMetaDo) Omit(cols ...field.Expr) IRuleMetaDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r ruleMetaDo) Join(table schema.Tabler, on ...field.Expr) IRuleMetaDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r ruleMetaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRuleMetaDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r ruleMetaDo) RightJoin(table schema.Tabler, on ...field.Expr) IRuleMetaDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r ruleMetaDo) Group(cols ...field.Expr) IRuleMetaDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r ruleMetaDo) Having(conds ...gen.Condition) IRuleMetaDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r ruleMetaDo) Limit(limit int) IRuleMetaDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r ruleMetaDo) Offset(offset int) IRuleMetaDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r ruleMetaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRuleMetaDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r ruleMetaDo) Unscoped() IRuleMetaDo {
	return r.withDO(r.DO.Unscoped())
}

func (r ruleMetaDo) Create(values ...*model.RuleMeta) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r ruleMetaDo) CreateInBatches(values []*model.RuleMeta, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r ruleMetaDo) Save(values ...*model.RuleMeta) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r ruleMetaDo) First() (*model.RuleMeta, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleMeta), nil
	}
}

func (r ruleMetaDo) Take() (*model.RuleMeta, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleMeta), nil
	}
}

func (r ruleMetaDo) Last() (*model.RuleMeta, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleMeta), nil
	}
}

func (r ruleMetaDo) Find() ([]*model.RuleMeta, error) {
	result, err := r.DO.Find()
	return result.([]*model.RuleMeta), err
}

func (r ruleMetaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RuleMeta, err error) {
	buf := make([]*model.RuleMeta, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r ruleMetaDo) FindInBatches(result *[]*model.RuleMeta, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r ruleMetaDo) Attrs(attrs ...field.AssignExpr) IRuleMetaDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r ruleMetaDo) Assign(attrs ...field.AssignExpr) IRuleMetaDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r ruleMetaDo) Joins(fields ...field.RelationField) IRuleMetaDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r ruleMetaDo) Preload(fields ...field.RelationField) IRuleMetaDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r ruleMetaDo) FirstOrInit() (*model.RuleMeta, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleMeta), nil
	}
}

func (r ruleMetaDo) FirstOrCreate() (*model.RuleMeta, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleMeta), nil
	}
}

func (r ruleMetaDo) FindByPage(offset int, limit int) (result []*model.RuleMeta, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r ruleMetaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r ruleMetaDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r ruleMetaDo) Delete(models ...*model.RuleMeta) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *ruleMetaDo) withDO(do gen.Dao) *ruleMetaDo {
	r.DO = *do.(*gen.DO)
	return r
}
