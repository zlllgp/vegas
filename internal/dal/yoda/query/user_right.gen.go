// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zlllgp/vegas/internal/dal/yoda/model"
)

func newUserRight(db *gorm.DB, opts ...gen.DOOption) userRight {
	_userRight := userRight{}

	_userRight.userRightDo.UseDB(db, opts...)
	_userRight.userRightDo.UseModel(&model.UserRight{})

	tableName := _userRight.userRightDo.TableName()
	_userRight.ALL = field.NewAsterisk(tableName)
	_userRight.ID = field.NewInt64(tableName, "id")
	_userRight.CreatedAt = field.NewTime(tableName, "created_at")
	_userRight.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userRight.DeletedAt = field.NewField(tableName, "deleted_at")
	_userRight.UserID = field.NewInt64(tableName, "user_id")
	_userRight.UserName = field.NewString(tableName, "user_name")
	_userRight.ActivityID = field.NewInt64(tableName, "activity_id")
	_userRight.PlanID = field.NewInt64(tableName, "plan_id")
	_userRight.RightsTemplateID = field.NewInt64(tableName, "rights_template_id")
	_userRight.RightsInstanceID = field.NewInt64(tableName, "rights_instance_id")

	_userRight.fillFieldMap()

	return _userRight
}

type userRight struct {
	userRightDo

	ALL              field.Asterisk
	ID               field.Int64
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	UserID           field.Int64
	UserName         field.String
	ActivityID       field.Int64
	PlanID           field.Int64
	RightsTemplateID field.Int64
	RightsInstanceID field.Int64

	fieldMap map[string]field.Expr
}

func (u userRight) Table(newTableName string) *userRight {
	u.userRightDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRight) As(alias string) *userRight {
	u.userRightDo.DO = *(u.userRightDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRight) updateTableName(table string) *userRight {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.UserName = field.NewString(table, "user_name")
	u.ActivityID = field.NewInt64(table, "activity_id")
	u.PlanID = field.NewInt64(table, "plan_id")
	u.RightsTemplateID = field.NewInt64(table, "rights_template_id")
	u.RightsInstanceID = field.NewInt64(table, "rights_instance_id")

	u.fillFieldMap()

	return u
}

func (u *userRight) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRight) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["user_name"] = u.UserName
	u.fieldMap["activity_id"] = u.ActivityID
	u.fieldMap["plan_id"] = u.PlanID
	u.fieldMap["rights_template_id"] = u.RightsTemplateID
	u.fieldMap["rights_instance_id"] = u.RightsInstanceID
}

func (u userRight) clone(db *gorm.DB) userRight {
	u.userRightDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRight) replaceDB(db *gorm.DB) userRight {
	u.userRightDo.ReplaceDB(db)
	return u
}

type userRightDo struct{ gen.DO }

type IUserRightDo interface {
	gen.SubQuery
	Debug() IUserRightDo
	WithContext(ctx context.Context) IUserRightDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRightDo
	WriteDB() IUserRightDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRightDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRightDo
	Not(conds ...gen.Condition) IUserRightDo
	Or(conds ...gen.Condition) IUserRightDo
	Select(conds ...field.Expr) IUserRightDo
	Where(conds ...gen.Condition) IUserRightDo
	Order(conds ...field.Expr) IUserRightDo
	Distinct(cols ...field.Expr) IUserRightDo
	Omit(cols ...field.Expr) IUserRightDo
	Join(table schema.Tabler, on ...field.Expr) IUserRightDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRightDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRightDo
	Group(cols ...field.Expr) IUserRightDo
	Having(conds ...gen.Condition) IUserRightDo
	Limit(limit int) IUserRightDo
	Offset(offset int) IUserRightDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRightDo
	Unscoped() IUserRightDo
	Create(values ...*model.UserRight) error
	CreateInBatches(values []*model.UserRight, batchSize int) error
	Save(values ...*model.UserRight) error
	First() (*model.UserRight, error)
	Take() (*model.UserRight, error)
	Last() (*model.UserRight, error)
	Find() ([]*model.UserRight, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRight, err error)
	FindInBatches(result *[]*model.UserRight, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRight) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRightDo
	Assign(attrs ...field.AssignExpr) IUserRightDo
	Joins(fields ...field.RelationField) IUserRightDo
	Preload(fields ...field.RelationField) IUserRightDo
	FirstOrInit() (*model.UserRight, error)
	FirstOrCreate() (*model.UserRight, error)
	FindByPage(offset int, limit int) (result []*model.UserRight, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRightDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRightDo) Debug() IUserRightDo {
	return u.withDO(u.DO.Debug())
}

func (u userRightDo) WithContext(ctx context.Context) IUserRightDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRightDo) ReadDB() IUserRightDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRightDo) WriteDB() IUserRightDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRightDo) Session(config *gorm.Session) IUserRightDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRightDo) Clauses(conds ...clause.Expression) IUserRightDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRightDo) Returning(value interface{}, columns ...string) IUserRightDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRightDo) Not(conds ...gen.Condition) IUserRightDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRightDo) Or(conds ...gen.Condition) IUserRightDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRightDo) Select(conds ...field.Expr) IUserRightDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRightDo) Where(conds ...gen.Condition) IUserRightDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRightDo) Order(conds ...field.Expr) IUserRightDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRightDo) Distinct(cols ...field.Expr) IUserRightDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRightDo) Omit(cols ...field.Expr) IUserRightDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRightDo) Join(table schema.Tabler, on ...field.Expr) IUserRightDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRightDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRightDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRightDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRightDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRightDo) Group(cols ...field.Expr) IUserRightDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRightDo) Having(conds ...gen.Condition) IUserRightDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRightDo) Limit(limit int) IUserRightDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRightDo) Offset(offset int) IUserRightDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRightDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRightDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRightDo) Unscoped() IUserRightDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRightDo) Create(values ...*model.UserRight) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRightDo) CreateInBatches(values []*model.UserRight, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRightDo) Save(values ...*model.UserRight) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRightDo) First() (*model.UserRight, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRight), nil
	}
}

func (u userRightDo) Take() (*model.UserRight, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRight), nil
	}
}

func (u userRightDo) Last() (*model.UserRight, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRight), nil
	}
}

func (u userRightDo) Find() ([]*model.UserRight, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRight), err
}

func (u userRightDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRight, err error) {
	buf := make([]*model.UserRight, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRightDo) FindInBatches(result *[]*model.UserRight, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRightDo) Attrs(attrs ...field.AssignExpr) IUserRightDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRightDo) Assign(attrs ...field.AssignExpr) IUserRightDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRightDo) Joins(fields ...field.RelationField) IUserRightDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRightDo) Preload(fields ...field.RelationField) IUserRightDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRightDo) FirstOrInit() (*model.UserRight, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRight), nil
	}
}

func (u userRightDo) FirstOrCreate() (*model.UserRight, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRight), nil
	}
}

func (u userRightDo) FindByPage(offset int, limit int) (result []*model.UserRight, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRightDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRightDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRightDo) Delete(models ...*model.UserRight) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRightDo) withDO(do gen.Dao) *userRightDo {
	u.DO = *do.(*gen.DO)
	return u
}
